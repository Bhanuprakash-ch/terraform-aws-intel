# Change needed

aws_access_key = "YOUR-AWS-KEY"
aws_secret_key = "YOUR-AWS-SECRET"
cf_admin_pass = "PUT-YOUR-PASSWORD-HERE"
cf_client_pass = "PUT-YOUR-CF-PASSWORD-HERE"

# Default values, may be changed if needed

aws_key_path = "~/.ssh/bosh.pem"
aws_key_name = "bosh"
aws_region = "us-west-1"
network = "10.10"
cf_size = "tiny"
hadoop_worker_count = "3"
hadoop_instance_type = "m3.xlarge"
env_name = "trustedanalytics"
quay_username = ""
quay_pass = ""

# tag values, key order: Project,IAP,Environment
aws_tags = "Foo Bar,00000,Development"
# Use "XIP" for an xip.io based domain, or provide your own domain here
# NOTE: xip.io should never be used for production deployment
cf_domain="XIP" 

# Prevent Host Header spoofing from hitting internal APIs:
private_cf_domains="xip.internal"

# Control the cloudfoundry deployment size
# Values are 'small', 'med', 'med-ha', and 'big-ha'
# See https://github.com/cloudfoundry-community/terraform-aws-cf-install/blob/master/variables.tf for how
# those sizes inform instance counts

deployment_size="small"
install_docker_services="true"
install_logsearch="false"

# Should we use offline buildpack for java?
#offline_java_buildpack="true"

# Expert only! Do not change if unsure

# Control the version of CF to be deployed
cf_release_version="212"

# cf-boshworkspace
cf_boshworkspace_repository="https://github.com/trustedanalytics/cf-boshworkspace.git"
cf_boshworkspace_branch="TAP-2016-JAN-2-1"

# docker-services-boshworkspace
docker_services_boshworkspace_repository="https://github.com/trustedanalytics/docker-services-boshworkspace.git"
docker_services_boshworkspace_branch="TAP-2016-JAN-2-1"

# logsearch-boshworkspace
logsearch_workspace_repository="https://github.com/trustedanalytics/logsearch-workspace.git"
logsearch_workspace_branch="TAP-2016-JAN-2-1"

# Optional parameters of db lb
#db-lb_instance_count="0"
#db-lb_instance_type="m3.medium"
# Optional MySQL Percona XtraDB Galera cluster parameters with their defaults
#mysql-cluster_size="none" #possible values: none, small
#mysql-cluster_backup_fs_size="250"
#mysql-cluster_backup_instance_type="m3.xlarge"
#mysql-cluster_db_fs_size="100"
#mysql-cluster_db_instance_type="r3.large"
#
# How long should we wait before timing out on AWS VM creation/deletion? (seconds)
#os_timeout=1200
